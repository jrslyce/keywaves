// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum UserRole {
  ADMIN
  GAME_MARKETER
  CONTENT_CREATOR
}

model User {
  id                 String   @id @default(cuid())
  name               String?
  email              String?  @unique
  emailVerified      DateTime?
  image              String?
  role               UserRole?
  twitchId           String?  @unique
  accounts      Account[]
  sessions      Session[]
  applications  Application[]
  campaigns     Campaign[]
  gameMarketerApplication GameMarketerApplication?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Campaign {
  id          String    @id @default(cuid())
  title       String
  description String
  logoUrl     String?
  videoUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  marketerId  String
  marketer    User      @relation(fields: [marketerId], references: [id])
  keys        GameKey[]
  applications Application[]
}

model GameKey {
  id         String   @id @default(cuid())
  key        String   @unique
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  usedBy     String?
}

model Application {
  id         String   @id @default(cuid())
  status     ApplicationStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

model GameMarketerApplication {
  id          String   @id @default(cuid())
  companyName String
  website     String
  reason      String
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  MORE_INFO
}
